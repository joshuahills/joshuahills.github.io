---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import Pill from '../components/Pill.astro';
import { tagsColoursMap } from '../pages/blog/tag-colour-map';
import '../styles/blog.css';
type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, author, status, tags } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<!-- Don't index private blog posts -->
		{status === 'draft' && <meta name="robots" content="noindex" />}
		<style>
			@font-face {
				font-family: 'Atkinson';
				src: url('/fonts/atkinson-regular.woff') format('woff');
				font-weight: 400;
				font-style: normal;
				font-display: swap;
			}
			@font-face {
				font-family: 'Atkinson';
				src: url('/fonts/atkinson-bold.woff') format('woff');
				font-weight: 700;
				font-style: normal;
				font-display: swap;
			}

			article {
				font-family: 'Atkinson', sans-serif;
				margin: 0;
				padding: 0;
				text-align: left;
				background-size: 100% 600px;
				word-wrap: break-word;
				overflow-wrap: break-word;
				font-size: 20px;
				line-height: 1.7;
			}

			main {
				max-width: 100%;
				margin: 0;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			{status === 'draft' && import.meta.env.PROD && <p class="text-2xl pt-2 text-center">This post is not available.</p>}
			{
				status === 'draft' && import.meta.env.DEV &&
				<div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 mx-20 mt-10 rounded-xl" role="alert">
					<p class="font-bold">This is a draft</p>
					<p class="text-2xl">This post is currently marked as "{status}". It will not be publicly visible.</p>
				</div>
			}
			{
				(status === 'published' || import.meta.env.DEV) &&
				<article class="blog-post">
					<div class="prose text-white">
						<div class="title">
							<div class="date">
								<FormattedDate date={pubDate} />
								{
									updatedDate && (
										<div class="last-updated-on">
											Last updated on <FormattedDate date={updatedDate} />
										</div>
									)
								}
							</div>
							<h1>{title}</h1>
							{
								tags.map((tag) =>
									<a href=`/blog/tags/${tag}` class="no-underline">
										<Pill text={tag} backgroundColour={tagsColoursMap.get(tag)?.backgroundColour} textColour={tagsColoursMap.get(tag)?.textColour} />
									</a>
								)
							}
							<div class="italic author py-2">By {author}</div>
							<hr />
						</div>
						<slot />
					</div>
				</article>
			}
		</main>
		<Footer />
	</body>
</html>
